(defpackage :cryptography
  (:use :cl))
(in-package :cryptography)

(defparameter *key*
  '((#\a . 54)
    (#\b . 38)
    (#\c . 8)
    (#\d . 90)
    (#\e . 100)
    (#\f . 86)
    (#\g . 84)
    (#\h . 70)
    (#\i . 50)
    (#\j . 80)
    (#\k . 2)
    (#\l . 82)
    (#\m . 72)
    (#\n . 42)
    (#\o . 64)
    (#\p . 22)
    (#\q . 28)
    (#\r . 20)
    (#\s . 6)
    (#\t . 76)
    (#\u . 56)
    (#\v . 10)
    (#\w . 12)
    (#\x . 4)
    (#\y . 26)
    (#\z . 36)
    (#\Space . 24)))

(defun encrypt (string)
  (map 'list (lambda (c)
	       (cdr (assoc c *key*)))
       (string-downcase string)))

(defun decrypt (list)
  (flet ((get-decrypt-key ()
	   (let ((result '()))
	     (dolist (pair *key* result)
	       (push (cons (cdr pair) (car pair)) result)))))
    (let ((decrypt-key (get-decrypt-key)))
      (map 'string (lambda (c)
		     (cdr (assoc c decrypt-key)))
	   list))))
